2015-07-20 00:01:06,683 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:01:06,686 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.pageLogs------------>
2015-07-20 00:01:06,843 [main] DEBUG cn.mypandora.system.LogEntity.pageLogs - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@2e0fba]
2015-07-20 00:01:06,869 [main] DEBUG cn.mypandora.orm.OffsetLimitInterceptor - 生成的分页SQL：select * from t_base_log where 1=1 order by create_time desc limit 0 ,3
2015-07-20 00:01:06,870 [main] DEBUG cn.mypandora.system.LogEntity.pageLogs - ==>  Preparing: select * from t_base_log where 1=1 order by create_time desc limit 0 ,3 
2015-07-20 00:01:06,914 [main] DEBUG cn.mypandora.system.LogEntity.pageLogs - ==> Parameters: 
2015-07-20 00:01:06,960 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.pageLogs------------>
2015-07-20 00:01:06,976 [main] DEBUG cn.mypandora.dao.base.countSql - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@2e0fba]
2015-07-20 00:01:06,977 [main] DEBUG cn.mypandora.dao.base.countSql - ==>  Preparing: select count(1) from (select * from t_base_log where 1=1 ) count_sql_alias 
2015-07-20 00:01:06,978 [main] DEBUG cn.mypandora.dao.base.countSql - ==> Parameters: 
2015-07-20 00:01:07,005 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:19:37,853 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:19:37,856 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.update------------>
2015-07-20 00:19:37,973 [main] DEBUG cn.mypandora.system.UserEntity.update - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@2e7b78]
2015-07-20 00:19:37,979 [main] DEBUG cn.mypandora.system.UserEntity.update - ==>  Preparing: update t_base_user SET username=?, password=?, credit=? WHERE id = ? 
2015-07-20 00:19:38,023 [main] DEBUG cn.mypandora.system.UserEntity.update - ==> Parameters: admin(String), 123456(String), 5(Integer), null
2015-07-20 00:19:38,106 [main] ERROR cn.mypandora.log.MyLogAspect - afterThrowing
2015-07-20 00:19:38,107 [main] ERROR cn.mypandora.log.MyLogAspect - 错误信息：org.springframework.jdbc.BadSqlGrammarException: cn.mypandora.system.UserEntity.update (batch index #1) failed. Cause: java.sql.BatchUpdateException: Unknown column 'credit' in 'field list'
; bad SQL grammar []; nested exception is java.sql.BatchUpdateException: Unknown column 'credit' in 'field list'
2015-07-20 00:20:14,386 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:20:14,389 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.update------------>
2015-07-20 00:20:14,500 [main] DEBUG cn.mypandora.system.UserEntity.update - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@254927]
2015-07-20 00:20:14,505 [main] DEBUG cn.mypandora.system.UserEntity.update - ==>  Preparing: update t_base_user SET username=?, password=?, credit=? WHERE id = ? 
2015-07-20 00:20:14,551 [main] DEBUG cn.mypandora.system.UserEntity.update - ==> Parameters: admin(String), 123456(String), 5(Integer), null
2015-07-20 00:20:14,570 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:34:41,935 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:34:42,004 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.add------------>
2015-07-20 00:34:42,062 [main] DEBUG cn.mypandora.system.UserEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@8848b7]
2015-07-20 00:34:42,067 [main] DEBUG cn.mypandora.system.UserEntity.add - ==>  Preparing: INSERT INTO t_base_user ( user_name, password, real_name, email, phone, mobile, picture_url, sex, birthday, credits, last_ip, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2015-07-20 00:34:42,132 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:34:42,133 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.add------------>
2015-07-20 00:34:42,134 [main] DEBUG cn.mypandora.system.LogEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@8848b7]
2015-07-20 00:34:42,135 [main] DEBUG cn.mypandora.system.LogEntity.add - ==>  Preparing: INSERT INTO t_base_log ( name, description, ip ) VALUES ( ?, ?, ? ) 
2015-07-20 00:34:42,136 [main] DEBUG cn.mypandora.system.LogEntity.add - ==> Parameters: 稍后获取(String), 新增用户(String), 稍后获取(String)
2015-07-20 00:34:42,226 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@8848b7]
2015-07-20 00:34:42,227 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:34:42,228 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:34:42,252 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:34:42,252 [main] ERROR cn.mypandora.log.MyLogAspect - afterThrowing
2015-07-20 00:34:42,253 [main] ERROR cn.mypandora.log.MyLogAspect - 错误信息：org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'credits' in 'class cn.mypandora.system.po.BaseUser'
2015-07-20 00:36:54,169 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:36:54,177 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.add------------>
2015-07-20 00:36:54,243 [main] DEBUG cn.mypandora.system.UserEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1aecf4]
2015-07-20 00:36:54,248 [main] DEBUG cn.mypandora.system.UserEntity.add - ==>  Preparing: INSERT INTO t_base_user ( username, password, real_name, salt, locked, email, phone, mobile, picture_url, sex, birthday, credit, last_ip, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2015-07-20 00:36:54,306 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:36:54,306 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.add------------>
2015-07-20 00:36:54,308 [main] DEBUG cn.mypandora.system.LogEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1aecf4]
2015-07-20 00:36:54,309 [main] DEBUG cn.mypandora.system.LogEntity.add - ==>  Preparing: INSERT INTO t_base_log ( name, description, ip ) VALUES ( ?, ?, ? ) 
2015-07-20 00:36:54,310 [main] DEBUG cn.mypandora.system.LogEntity.add - ==> Parameters: 稍后获取(String), 新增用户(String), 稍后获取(String)
2015-07-20 00:36:54,462 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1aecf4]
2015-07-20 00:36:54,463 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:36:54,466 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:36:54,491 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:36:54,492 [main] ERROR cn.mypandora.log.MyLogAspect - afterThrowing
2015-07-20 00:36:54,493 [main] ERROR cn.mypandora.log.MyLogAspect - 错误信息：org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'creatTime' in 'class cn.mypandora.system.po.BaseUser'
2015-07-20 00:37:33,415 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:37:33,429 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.add------------>
2015-07-20 00:37:33,488 [main] DEBUG cn.mypandora.system.UserEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@cb175d]
2015-07-20 00:37:33,493 [main] DEBUG cn.mypandora.system.UserEntity.add - ==>  Preparing: INSERT INTO t_base_user ( username, password, real_name, salt, locked, email, phone, mobile, picture_url, sex, birthday, credit, last_ip, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2015-07-20 00:37:33,549 [main] DEBUG cn.mypandora.system.UserEntity.add - ==> Parameters: admin(String), 00f25e88e7bbccca9f718d1cb34e84bc(String), 476b6d355edad68c112293087f234e37(String), false(Boolean), kaibo(String), han@126.com(String), 12345678910(String), null, null, 1(Integer), null, 0(Integer), 127.0.0.1(String), null, null
2015-07-20 00:37:33,632 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:37:33,633 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.add------------>
2015-07-20 00:37:33,634 [main] DEBUG cn.mypandora.system.LogEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@cb175d]
2015-07-20 00:37:33,635 [main] DEBUG cn.mypandora.system.LogEntity.add - ==>  Preparing: INSERT INTO t_base_log ( name, description, ip ) VALUES ( ?, ?, ? ) 
2015-07-20 00:37:33,636 [main] DEBUG cn.mypandora.system.LogEntity.add - ==> Parameters: 稍后获取(String), 新增用户(String), 稍后获取(String)
2015-07-20 00:37:33,758 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@cb175d]
2015-07-20 00:37:33,759 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:37:33,760 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:37:33,796 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:37:33,796 [main] ERROR cn.mypandora.log.MyLogAspect - afterThrowing
2015-07-20 00:37:33,797 [main] ERROR cn.mypandora.log.MyLogAspect - 错误信息：org.springframework.dao.DataIntegrityViolationException: cn.mypandora.system.UserEntity.add (batch index #1) failed. Cause: java.sql.BatchUpdateException: Data truncation: Data too long for column 'locked' at row 1
; SQL []; Data truncation: Data too long for column 'locked' at row 1; nested exception is java.sql.BatchUpdateException: Data truncation: Data too long for column 'locked' at row 1
2015-07-20 00:38:45,768 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:38:45,775 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.add------------>
2015-07-20 00:38:45,839 [main] DEBUG cn.mypandora.system.UserEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1449c55]
2015-07-20 00:38:45,844 [main] DEBUG cn.mypandora.system.UserEntity.add - ==>  Preparing: INSERT INTO t_base_user ( username, password, real_name, salt, locked, email, phone, mobile, picture_url, sex, birthday, credit, last_ip, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2015-07-20 00:38:45,899 [main] DEBUG cn.mypandora.system.UserEntity.add - ==> Parameters: admin(String), cf47ca9d7889e10a23a353e5a36de7c6(String), 765070709fa384b1a3f235aeb399a104(String), false(Boolean), kaibo(String), han@126.com(String), 12345678910(String), null, null, 1(Integer), null, 0(Integer), 127.0.0.1(String), null, null
2015-07-20 00:38:45,978 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:38:45,978 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.add------------>
2015-07-20 00:38:45,980 [main] DEBUG cn.mypandora.system.LogEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1449c55]
2015-07-20 00:38:45,980 [main] DEBUG cn.mypandora.system.LogEntity.add - ==>  Preparing: INSERT INTO t_base_log ( name, description, ip ) VALUES ( ?, ?, ? ) 
2015-07-20 00:38:45,982 [main] DEBUG cn.mypandora.system.LogEntity.add - ==> Parameters: 稍后获取(String), 新增用户(String), 稍后获取(String)
2015-07-20 00:38:46,093 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1449c55]
2015-07-20 00:38:46,094 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:38:46,095 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:38:46,126 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:38:46,127 [main] ERROR cn.mypandora.log.MyLogAspect - afterThrowing
2015-07-20 00:38:46,127 [main] ERROR cn.mypandora.log.MyLogAspect - 错误信息：org.springframework.dao.DataIntegrityViolationException: cn.mypandora.system.UserEntity.add (batch index #1) failed. Cause: java.sql.BatchUpdateException: Data truncation: Incorrect integer value: 'kaibo' for column 'locked' at row 1
; SQL []; Data truncation: Incorrect integer value: 'kaibo' for column 'locked' at row 1; nested exception is java.sql.BatchUpdateException: Data truncation: Incorrect integer value: 'kaibo' for column 'locked' at row 1
2015-07-20 00:41:45,983 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:41:45,996 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.add------------>
2015-07-20 00:41:46,051 [main] DEBUG cn.mypandora.system.UserEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@14b7aee]
2015-07-20 00:41:46,058 [main] DEBUG cn.mypandora.system.UserEntity.add - ==>  Preparing: INSERT INTO t_base_user ( username, password, salt, locked, real_name, email, phone, mobile, picture_url, sex, birthday, credit, last_ip, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2015-07-20 00:41:46,109 [main] DEBUG cn.mypandora.system.UserEntity.add - ==> Parameters: admin(String), 332147f55614857215cf7d054016153e(String), fe342c669e2135ecf67bebd949554918(String), false(Boolean), kaibo(String), han@126.com(String), 12345678910(String), null, null, 1(Integer), null, 0(Integer), 127.0.0.1(String), null, null
2015-07-20 00:41:46,197 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@14b7aee]
2015-07-20 00:41:46,198 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:41:46,199 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:41:46,238 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:41:46,240 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:41:46,241 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.add------------>
2015-07-20 00:41:46,243 [main] DEBUG cn.mypandora.system.LogEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@14b7aee]
2015-07-20 00:41:46,243 [main] DEBUG cn.mypandora.system.LogEntity.add - ==>  Preparing: INSERT INTO t_base_log ( name, description, ip ) VALUES ( ?, ?, ? ) 
2015-07-20 00:41:46,245 [main] DEBUG cn.mypandora.system.LogEntity.add - ==> Parameters: 稍后获取(String), 新增用户(String), 稍后获取(String)
2015-07-20 00:41:46,343 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@14b7aee]
2015-07-20 00:41:46,344 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:41:46,344 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:41:46,346 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:43:49,446 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:43:49,453 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.add------------>
2015-07-20 00:43:49,514 [main] DEBUG cn.mypandora.system.UserEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@13bf398]
2015-07-20 00:43:49,519 [main] DEBUG cn.mypandora.system.UserEntity.add - ==>  Preparing: INSERT INTO t_base_user ( username, password, salt, locked, real_name, email, phone, mobile, picture_url, sex, birthday, credit, last_ip, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2015-07-20 00:43:49,571 [main] DEBUG cn.mypandora.system.UserEntity.add - ==> Parameters: admin(String), 038826ac6a290314c8c6ba2d8b9ff64e(String), e4e1d2259381f84a0ee43978f4e12ac0(String), false(Boolean), kaibo(String), han@126.com(String), 12345678910(String), null, null, 1(Integer), null, 0(Integer), 127.0.0.1(String), null, null
2015-07-20 00:43:49,685 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@13bf398]
2015-07-20 00:43:49,686 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:43:49,687 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:43:49,717 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:43:49,719 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:43:49,720 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.add------------>
2015-07-20 00:43:49,722 [main] DEBUG cn.mypandora.system.LogEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@13bf398]
2015-07-20 00:43:49,723 [main] DEBUG cn.mypandora.system.LogEntity.add - ==>  Preparing: INSERT INTO t_base_log ( name, description, ip ) VALUES ( ?, ?, ? ) 
2015-07-20 00:43:49,724 [main] DEBUG cn.mypandora.system.LogEntity.add - ==> Parameters: 稍后获取(String), 新增用户(String), 稍后获取(String)
2015-07-20 00:43:49,824 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@13bf398]
2015-07-20 00:43:49,825 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:43:49,825 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:43:49,827 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:44:21,624 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:44:21,632 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.add------------>
2015-07-20 00:44:21,695 [main] DEBUG cn.mypandora.system.UserEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1aecf4]
2015-07-20 00:44:21,701 [main] DEBUG cn.mypandora.system.UserEntity.add - ==>  Preparing: INSERT INTO t_base_user ( username, password, salt, locked, real_name, email, phone, mobile, picture_url, sex, birthday, credit, last_ip, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2015-07-20 00:44:21,753 [main] DEBUG cn.mypandora.system.UserEntity.add - ==> Parameters: admin(String), bbad9270128f61b098872a43ba75d074(String), 002197693ca09ee112690daa6d1d95cb(String), false(Boolean), kaibo(String), han@126.com(String), 12345678910(String), null, null, 1(Integer), null, 0(Integer), 127.0.0.1(String), null, null
2015-07-20 00:44:21,897 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1aecf4]
2015-07-20 00:44:21,898 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:44:21,900 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:44:21,943 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:44:21,946 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:44:21,947 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.add------------>
2015-07-20 00:44:21,948 [main] DEBUG cn.mypandora.system.LogEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1aecf4]
2015-07-20 00:44:21,949 [main] DEBUG cn.mypandora.system.LogEntity.add - ==>  Preparing: INSERT INTO t_base_log ( name, description, ip ) VALUES ( ?, ?, ? ) 
2015-07-20 00:44:21,950 [main] DEBUG cn.mypandora.system.LogEntity.add - ==> Parameters: 稍后获取(String), 新增用户(String), 稍后获取(String)
2015-07-20 00:44:22,083 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1aecf4]
2015-07-20 00:44:22,084 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:44:22,085 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:44:22,087 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:45:56,327 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:45:56,330 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.delete------------>
2015-07-20 00:45:56,382 [main] DEBUG cn.mypandora.system.UserEntity.delete - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@55c9e3]
2015-07-20 00:45:56,388 [main] DEBUG cn.mypandora.system.UserEntity.delete - ==>  Preparing: DELETE from t_base_user WHERE id = ? 
2015-07-20 00:45:56,437 [main] DEBUG cn.mypandora.system.UserEntity.delete - ==> Parameters: 2(Long)
2015-07-20 00:45:56,439 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:45:56,442 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:45:56,442 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.add------------>
2015-07-20 00:45:56,443 [main] DEBUG cn.mypandora.system.LogEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@55c9e3]
2015-07-20 00:45:56,444 [main] DEBUG cn.mypandora.system.LogEntity.add - ==>  Preparing: INSERT INTO t_base_log ( name, description, ip ) VALUES ( ?, ?, ? ) 
2015-07-20 00:45:56,446 [main] DEBUG cn.mypandora.system.LogEntity.add - ==> Parameters: 稍后获取(String), 删除用户(String), 稍后获取(String)
2015-07-20 00:45:56,448 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:45:56,456 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@55c9e3]
2015-07-20 00:45:56,458 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:45:56,459 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:48:48,944 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:48:48,947 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.deleteBatch------------>
2015-07-20 00:48:49,026 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:48:49,026 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.add------------>
2015-07-20 00:48:49,045 [main] DEBUG cn.mypandora.system.LogEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@ff14be]
2015-07-20 00:48:49,050 [main] DEBUG cn.mypandora.system.LogEntity.add - ==>  Preparing: INSERT INTO t_base_log ( name, description, ip ) VALUES ( ?, ?, ? ) 
2015-07-20 00:48:49,096 [main] DEBUG cn.mypandora.system.LogEntity.add - ==> Parameters: 稍后获取(String), 删除批量用户(String), 稍后获取(String)
2015-07-20 00:48:49,098 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:48:49,098 [main] ERROR cn.mypandora.log.MyLogAspect - afterThrowing
2015-07-20 00:48:49,099 [main] ERROR cn.mypandora.log.MyLogAspect - 错误信息：org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter 'list' not found. Available parameters are [array]
2015-07-20 00:52:45,609 [main] ERROR org.springframework.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@150e845] to prepare test instance [cn.mypandora.system.service.TestUserService@c12662]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:103) ~[spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:122) ~[spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) ~[spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75) ~[spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321) ~[spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211) [spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288) [spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.11.jar:na]
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:284) [spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231) [spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88) [spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) [junit-4.11.jar:na]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) [junit-4.11.jar:na]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) [junit-4.11.jar:na]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) [junit-4.11.jar:na]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) [junit-4.11.jar:na]
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71) [spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) [junit-4.11.jar:na]
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174) [spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160) [junit-4.11.jar:na]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74) [junit-rt.jar:na]
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211) [junit-rt.jar:na]
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67) [junit-rt.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_79]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_79]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_79]
	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_79]
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) [idea_rt.jar:na]
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'shiroFilter' defined in class path resource [applicationContext-shiro.xml]: Cannot resolve reference to bean 'securityManager' while setting bean property 'securityManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'securityManager' defined in class path resource [applicationContext-shiro.xml]: Cannot resolve reference to bean 'myUserRealm' while setting bean property 'realm'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myUserRealm': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'baseUserServiceImpl': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'baseUserDaoImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.apache.ibatis.session.SqlSession cn.mypandora.orm.dao.impl.BaseEntityDaoImpl.sqlSession; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSession' defined in class path resource [applicationContext.xml]: Cannot resolve reference to bean 'sqlSessionFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project\myframework\myframework\target\classes\mapping\base\BaseUser.mybatis.xml]'; nested exception is java.lang.RuntimeException: Error parsing Mapper XML. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'array'.  Cause: java.lang.ClassNotFoundException: Cannot find class: array
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:334) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1419) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1160) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:755) ~[spring-context-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:464) ~[spring-context-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:120) ~[spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60) ~[spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:102) ~[spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:246) ~[spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:69) ~[spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:95) ~[spring-test-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	... 28 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'securityManager' defined in class path resource [applicationContext-shiro.xml]: Cannot resolve reference to bean 'myUserRealm' while setting bean property 'realm'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myUserRealm': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'baseUserServiceImpl': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'baseUserDaoImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.apache.ibatis.session.SqlSession cn.mypandora.orm.dao.impl.BaseEntityDaoImpl.sqlSession; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSession' defined in class path resource [applicationContext.xml]: Cannot resolve reference to bean 'sqlSessionFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project\myframework\myframework\target\classes\mapping\base\BaseUser.mybatis.xml]'; nested exception is java.lang.RuntimeException: Error parsing Mapper XML. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'array'.  Cause: java.lang.ClassNotFoundException: Cannot find class: array
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:334) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1419) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1160) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:328) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	... 45 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myUserRealm': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'baseUserServiceImpl': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'baseUserDaoImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.apache.ibatis.session.SqlSession cn.mypandora.orm.dao.impl.BaseEntityDaoImpl.sqlSession; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSession' defined in class path resource [applicationContext.xml]: Cannot resolve reference to bean 'sqlSessionFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project\myframework\myframework\target\classes\mapping\base\BaseUser.mybatis.xml]'; nested exception is java.lang.RuntimeException: Error parsing Mapper XML. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'array'.  Cause: java.lang.ClassNotFoundException: Cannot find class: array
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:307) ~[spring-context-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1148) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:328) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	... 55 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'baseUserServiceImpl': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'baseUserDaoImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.apache.ibatis.session.SqlSession cn.mypandora.orm.dao.impl.BaseEntityDaoImpl.sqlSession; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSession' defined in class path resource [applicationContext.xml]: Cannot resolve reference to bean 'sqlSessionFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project\myframework\myframework\target\classes\mapping\base\BaseUser.mybatis.xml]'; nested exception is java.lang.RuntimeException: Error parsing Mapper XML. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'array'.  Cause: java.lang.ClassNotFoundException: Cannot find class: array
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:307) ~[spring-context-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1148) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:921) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:864) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:779) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:445) ~[spring-context-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:423) ~[spring-context-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:551) ~[spring-context-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:169) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:304) ~[spring-context-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	... 63 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'baseUserDaoImpl': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.apache.ibatis.session.SqlSession cn.mypandora.orm.dao.impl.BaseEntityDaoImpl.sqlSession; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSession' defined in class path resource [applicationContext.xml]: Cannot resolve reference to bean 'sqlSessionFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project\myframework\myframework\target\classes\mapping\base\BaseUser.mybatis.xml]'; nested exception is java.lang.RuntimeException: Error parsing Mapper XML. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'array'.  Cause: java.lang.ClassNotFoundException: Cannot find class: array
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:298) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1148) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:921) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:864) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:779) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:445) ~[spring-context-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:423) ~[spring-context-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:551) ~[spring-context-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:169) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:304) ~[spring-context-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	... 79 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: private org.apache.ibatis.session.SqlSession cn.mypandora.orm.dao.impl.BaseEntityDaoImpl.sqlSession; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSession' defined in class path resource [applicationContext.xml]: Cannot resolve reference to bean 'sqlSessionFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project\myframework\myframework\target\classes\mapping\base\BaseUser.mybatis.xml]'; nested exception is java.lang.RuntimeException: Error parsing Mapper XML. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'array'.  Cause: java.lang.ClassNotFoundException: Cannot find class: array
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:531) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:295) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	... 95 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSession' defined in class path resource [applicationContext.xml]: Cannot resolve reference to bean 'sqlSessionFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project\myframework\myframework\target\classes\mapping\base\BaseUser.mybatis.xml]'; nested exception is java.lang.RuntimeException: Error parsing Mapper XML. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'array'.  Cause: java.lang.ClassNotFoundException: Cannot find class: array
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:334) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:637) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:145) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1077) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:981) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:487) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:921) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:864) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:779) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:503) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	... 97 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project\myframework\myframework\target\classes\mapping\base\BaseUser.mybatis.xml]'; nested exception is java.lang.RuntimeException: Error parsing Mapper XML. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'array'.  Cause: java.lang.ClassNotFoundException: Cannot find class: array
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1514) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:328) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	... 112 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\project\myframework\myframework\target\classes\mapping\base\BaseUser.mybatis.xml]'; nested exception is java.lang.RuntimeException: Error parsing Mapper XML. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'array'.  Cause: java.lang.ClassNotFoundException: Cannot find class: array
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:412) ~[mybatis-spring-1.1.1.jar:1.1.1]
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:295) ~[mybatis-spring-1.1.1.jar:1.1.1]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1573) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1511) ~[spring-beans-3.2.13.RELEASE.jar:3.2.13.RELEASE]
	... 119 common frames omitted
Caused by: java.lang.RuntimeException: Error parsing Mapper XML. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'array'.  Cause: java.lang.ClassNotFoundException: Cannot find class: array
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:113) ~[mybatis-3.2.2.jar:3.2.2]
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:88) ~[mybatis-3.2.2.jar:3.2.2]
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:410) ~[mybatis-spring-1.1.1.jar:1.1.1]
	... 122 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'array'.  Cause: java.lang.ClassNotFoundException: Cannot find class: array
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:100) ~[mybatis-3.2.2.jar:3.2.2]
	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:63) ~[mybatis-3.2.2.jar:3.2.2]
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:128) ~[mybatis-3.2.2.jar:3.2.2]
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:121) ~[mybatis-3.2.2.jar:3.2.2]
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:111) ~[mybatis-3.2.2.jar:3.2.2]
	... 124 common frames omitted
Caused by: org.apache.ibatis.type.TypeException: Could not resolve type alias 'array'.  Cause: java.lang.ClassNotFoundException: Cannot find class: array
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:114) ~[mybatis-3.2.2.jar:3.2.2]
	at org.apache.ibatis.builder.BaseBuilder.resolveAlias(BaseBuilder.java:127) ~[mybatis-3.2.2.jar:3.2.2]
	at org.apache.ibatis.builder.BaseBuilder.resolveClass(BaseBuilder.java:98) ~[mybatis-3.2.2.jar:3.2.2]
	... 128 common frames omitted
Caused by: java.lang.ClassNotFoundException: Cannot find class: array
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:188) ~[mybatis-3.2.2.jar:3.2.2]
	at org.apache.ibatis.io.ClassLoaderWrapper.classForName(ClassLoaderWrapper.java:87) ~[mybatis-3.2.2.jar:3.2.2]
	at org.apache.ibatis.io.Resources.classForName(Resources.java:254) ~[mybatis-3.2.2.jar:3.2.2]
	at org.apache.ibatis.type.TypeAliasRegistry.resolveAlias(TypeAliasRegistry.java:110) ~[mybatis-3.2.2.jar:3.2.2]
	... 130 common frames omitted
2015-07-20 00:54:21,151 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:54:21,155 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.deleteBatch------------>
2015-07-20 00:54:21,250 [main] DEBUG cn.mypandora.system.UserEntity.deleteBatch - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@261e41]
2015-07-20 00:54:21,255 [main] DEBUG cn.mypandora.system.UserEntity.deleteBatch - ==>  Preparing: DELETE from t_base_user WHERE id in ( ? , ? ) 
2015-07-20 00:54:21,298 [main] DEBUG cn.mypandora.system.UserEntity.deleteBatch - ==> Parameters: 1(Long), 3(Long)
2015-07-20 00:54:21,300 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:54:21,303 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:54:21,303 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.add------------>
2015-07-20 00:54:21,304 [main] DEBUG cn.mypandora.system.LogEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@261e41]
2015-07-20 00:54:21,305 [main] DEBUG cn.mypandora.system.LogEntity.add - ==>  Preparing: INSERT INTO t_base_log ( name, description, ip ) VALUES ( ?, ?, ? ) 
2015-07-20 00:54:21,307 [main] DEBUG cn.mypandora.system.LogEntity.add - ==> Parameters: 稍后获取(String), 删除批量用户(String), 稍后获取(String)
2015-07-20 00:54:21,308 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:54:21,354 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@261e41]
2015-07-20 00:54:21,355 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:54:21,356 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:55:00,134 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:55:00,141 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.add------------>
2015-07-20 00:55:00,201 [main] DEBUG cn.mypandora.system.UserEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@46e524]
2015-07-20 00:55:00,207 [main] DEBUG cn.mypandora.system.UserEntity.add - ==>  Preparing: INSERT INTO t_base_user ( username, password, salt, locked, real_name, email, phone, mobile, picture_url, sex, birthday, credit, last_ip, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2015-07-20 00:55:00,261 [main] DEBUG cn.mypandora.system.UserEntity.add - ==> Parameters: admin(String), 4a171ac26cfc82a44734ce81bacd5cf4(String), 1d8bcc896ac5776a3205777b3d299da3(String), false(Boolean), kaibo(String), han@126.com(String), 12345678910(String), null, null, 1(Integer), null, 0(Integer), 127.0.0.1(String), null, null
2015-07-20 00:55:00,384 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@46e524]
2015-07-20 00:55:00,385 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:55:00,386 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:55:00,414 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:55:00,423 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:55:00,424 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.add------------>
2015-07-20 00:55:00,425 [main] DEBUG cn.mypandora.system.LogEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@46e524]
2015-07-20 00:55:00,426 [main] DEBUG cn.mypandora.system.LogEntity.add - ==>  Preparing: INSERT INTO t_base_log ( name, description, ip ) VALUES ( ?, ?, ? ) 
2015-07-20 00:55:00,428 [main] DEBUG cn.mypandora.system.LogEntity.add - ==> Parameters: 稍后获取(String), 新增用户(String), 稍后获取(String)
2015-07-20 00:55:00,531 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@46e524]
2015-07-20 00:55:00,533 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:55:00,536 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:55:00,541 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:56:48,384 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:56:48,387 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.update------------>
2015-07-20 00:56:48,505 [main] DEBUG cn.mypandora.system.UserEntity.update - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@9f43b5]
2015-07-20 00:56:48,512 [main] DEBUG cn.mypandora.system.UserEntity.update - ==>  Preparing: update t_base_user SET username=?, password=?, salt=?, real_name=?, email=?, credit=?, last_ip=?, sex=? WHERE id = ? 
2015-07-20 00:56:48,576 [main] DEBUG cn.mypandora.system.UserEntity.update - ==> Parameters: admin(String), 123456(String), salt(String), kaibo(String), han@126.com(String), 1000(Integer), 127.0.0.1(String), 1(Integer), 4(Long)
2015-07-20 00:56:48,665 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:56:48,668 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:56:48,669 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.add------------>
2015-07-20 00:56:48,670 [main] DEBUG cn.mypandora.system.LogEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@9f43b5]
2015-07-20 00:56:48,671 [main] DEBUG cn.mypandora.system.LogEntity.add - ==>  Preparing: INSERT INTO t_base_log ( name, description, ip ) VALUES ( ?, ?, ? ) 
2015-07-20 00:56:48,672 [main] DEBUG cn.mypandora.system.LogEntity.add - ==> Parameters: 稍后获取(String), 修改用户(String), 稍后获取(String)
2015-07-20 00:56:48,778 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@9f43b5]
2015-07-20 00:56:48,779 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 00:56:48,779 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==> Parameters: 
2015-07-20 00:56:48,804 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 00:57:34,892 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 00:57:34,895 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.update------------>
2015-07-20 00:57:35,010 [main] DEBUG cn.mypandora.system.UserEntity.update - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@87a6ca]
2015-07-20 00:57:35,016 [main] DEBUG cn.mypandora.system.UserEntity.update - ==>  Preparing: update t_base_user SET username=?, password=?, credit=? WHERE id = ? 
2015-07-20 00:57:35,061 [main] DEBUG cn.mypandora.system.UserEntity.update - ==> Parameters: admin(String), 123456(String), 5(Integer), 4(Long)
2015-07-20 00:57:35,192 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 01:00:30,464 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:00:30,468 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.findById------------>
2015-07-20 01:00:30,560 [main] DEBUG cn.mypandora.system.UserEntity.findById - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@5ce05c]
2015-07-20 01:00:30,571 [main] DEBUG cn.mypandora.system.UserEntity.findById - ==>  Preparing: select * from t_base_user where id = ? 
2015-07-20 01:00:30,616 [main] DEBUG cn.mypandora.system.UserEntity.findById - ==> Parameters: 4(Long)
2015-07-20 01:00:30,659 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.update------------>
2015-07-20 01:00:30,755 [main] DEBUG cn.mypandora.system.UserEntity.update - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@5ce05c]
2015-07-20 01:00:30,756 [main] DEBUG cn.mypandora.system.UserEntity.update - ==>  Preparing: update t_base_user SET username=?, password=?, salt=?, real_name=?, email=?, credit=?, last_ip=?, sex=? WHERE id = ? 
2015-07-20 01:00:30,762 [main] DEBUG cn.mypandora.system.UserEntity.update - ==> Parameters: admin(String), ba580409222c6ab15cc513aaed51f8b5(String), 025ce5c2dfadd3716f1afab7937b80ef(String), kaibo(String), han@126.com(String), 5(Integer), 127.0.0.1(String), 1(Integer), 4(Long)
2015-07-20 01:00:30,850 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 01:04:57,237 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:04:57,240 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.findById------------>
2015-07-20 01:04:57,303 [main] DEBUG cn.mypandora.system.UserEntity.findById - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@f9a1af]
2015-07-20 01:04:57,308 [main] DEBUG cn.mypandora.system.UserEntity.findById - ==>  Preparing: select * from t_base_user where id = ? 
2015-07-20 01:04:57,351 [main] DEBUG cn.mypandora.system.UserEntity.findById - ==> Parameters: 4(Long)
2015-07-20 01:04:57,387 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 01:05:31,040 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:05:31,048 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.findById------------>
2015-07-20 01:05:31,109 [main] DEBUG cn.mypandora.system.UserEntity.findById - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@d9a418]
2015-07-20 01:05:31,115 [main] DEBUG cn.mypandora.system.UserEntity.findById - ==>  Preparing: select * from t_base_user where id = ? 
2015-07-20 01:05:31,164 [main] DEBUG cn.mypandora.system.UserEntity.findById - ==> Parameters: 4(Long)
2015-07-20 01:05:31,207 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 01:07:12,480 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:07:12,484 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.hasMatchUser------------>
2015-07-20 01:07:12,604 [main] DEBUG cn.mypandora.system.UserEntity.hasMatchUser - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@66dd83]
2015-07-20 01:07:12,610 [main] DEBUG cn.mypandora.system.UserEntity.hasMatchUser - ==>  Preparing: select * from t_base_user where 1=1 and user_name = ? and password = ? order by id desc 
2015-07-20 01:07:12,661 [main] DEBUG cn.mypandora.system.UserEntity.hasMatchUser - ==> Parameters: admin(String), 1(String)
2015-07-20 01:07:12,754 [main] ERROR cn.mypandora.log.MyLogAspect - afterThrowing
2015-07-20 01:07:12,755 [main] ERROR cn.mypandora.log.MyLogAspect - 错误信息：org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'user_name' in 'where clause'
### The error may exist in file [D:\project\myframework\myframework\target\classes\mapping\base\BaseUser.mybatis.xml]
### The error may involve cn.mypandora.system.UserEntity.hasMatchUser-Inline
### The error occurred while setting parameters
### SQL: select *         from t_base_user         where 1=1                       and user_name = ?                                 and password = ?                   order by id desc
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'user_name' in 'where clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'user_name' in 'where clause'
2015-07-20 01:08:02,943 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:08:02,946 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.hasMatchUser------------>
2015-07-20 01:08:03,051 [main] DEBUG cn.mypandora.system.UserEntity.hasMatchUser - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1b5ea7c]
2015-07-20 01:08:03,059 [main] DEBUG cn.mypandora.system.UserEntity.hasMatchUser - ==>  Preparing: select * from t_base_user where 1=1 and user_name = ? and password = ? order by id desc 
2015-07-20 01:08:03,112 [main] DEBUG cn.mypandora.system.UserEntity.hasMatchUser - ==> Parameters: admin(String), 1(String)
2015-07-20 01:08:03,217 [main] ERROR cn.mypandora.log.MyLogAspect - afterThrowing
2015-07-20 01:08:03,217 [main] ERROR cn.mypandora.log.MyLogAspect - 错误信息：org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'user_name' in 'where clause'
### The error may exist in file [D:\project\myframework\myframework\target\classes\mapping\base\BaseUser.mybatis.xml]
### The error may involve cn.mypandora.system.UserEntity.hasMatchUser-Inline
### The error occurred while setting parameters
### SQL: select *         from t_base_user         where 1=1                       and user_name = ?                                 and password = ?                   order by id desc
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'user_name' in 'where clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'user_name' in 'where clause'
2015-07-20 01:08:54,381 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:08:54,384 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.hasMatchUser------------>
2015-07-20 01:08:54,489 [main] DEBUG cn.mypandora.system.UserEntity.hasMatchUser - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@12b710e]
2015-07-20 01:08:54,498 [main] DEBUG cn.mypandora.system.UserEntity.hasMatchUser - ==>  Preparing: select * from t_base_user where 1=1 and username = ? and password = ? order by id desc 
2015-07-20 01:08:54,543 [main] DEBUG cn.mypandora.system.UserEntity.hasMatchUser - ==> Parameters: admin(String), 1(String)
2015-07-20 01:08:54,577 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 01:08:54,586 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:08:54,586 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.hasMatchUser------------>
2015-07-20 01:08:54,588 [main] DEBUG cn.mypandora.system.UserEntity.hasMatchUser - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@12b710e]
2015-07-20 01:08:54,589 [main] DEBUG cn.mypandora.system.UserEntity.hasMatchUser - ==>  Preparing: select * from t_base_user where 1=1 and username = ? and password = ? order by id desc 
2015-07-20 01:08:54,590 [main] DEBUG cn.mypandora.system.UserEntity.hasMatchUser - ==> Parameters: admin(String), 1111(String)
2015-07-20 01:08:54,594 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 01:09:47,912 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:09:47,916 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.findUserByName------------>
2015-07-20 01:09:47,984 [main] DEBUG cn.mypandora.system.UserEntity.findUserByName - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@14b7aee]
2015-07-20 01:09:47,990 [main] DEBUG cn.mypandora.system.UserEntity.findUserByName - ==>  Preparing: select * from t_base_user where 1=1 and username = ? 
2015-07-20 01:09:48,061 [main] DEBUG cn.mypandora.system.UserEntity.findUserByName - ==> Parameters: admin(String)
2015-07-20 01:09:48,096 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 01:12:53,350 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:12:53,353 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.------------>
2015-07-20 01:12:53,371 [main] ERROR cn.mypandora.log.MyLogAspect - afterThrowing
2015-07-20 01:12:53,372 [main] ERROR cn.mypandora.log.MyLogAspect - 错误信息：org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for cn.mypandora.system.UserEntity.
### Cause: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for cn.mypandora.system.UserEntity.
2015-07-20 01:13:50,241 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:13:50,244 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.pageUsers------------>
2015-07-20 01:13:50,343 [main] DEBUG cn.mypandora.system.UserEntity.pageUsers - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@42417e]
2015-07-20 01:13:50,352 [main] DEBUG cn.mypandora.orm.OffsetLimitInterceptor - 生成的分页SQL：select * from t_base_user where 1=1 limit 0 ,10
2015-07-20 01:13:50,353 [main] DEBUG cn.mypandora.system.UserEntity.pageUsers - ==>  Preparing: select * from t_base_user where 1=1 limit 0 ,10 
2015-07-20 01:13:50,395 [main] DEBUG cn.mypandora.system.UserEntity.pageUsers - ==> Parameters: 
2015-07-20 01:13:50,435 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.pageUsers------------>
2015-07-20 01:13:50,445 [main] DEBUG cn.mypandora.dao.base.countSql - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@42417e]
2015-07-20 01:13:50,446 [main] DEBUG cn.mypandora.dao.base.countSql - ==>  Preparing: select count(1) from (select * from t_base_user where 1=1) count_sql_alias 
2015-07-20 01:13:50,447 [main] DEBUG cn.mypandora.dao.base.countSql - ==> Parameters: 
2015-07-20 01:13:50,449 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 01:15:03,626 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:15:03,629 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.pageUsers------------>
2015-07-20 01:15:03,733 [main] DEBUG cn.mypandora.system.UserEntity.pageUsers - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1d9be82]
2015-07-20 01:15:03,742 [main] DEBUG cn.mypandora.orm.OffsetLimitInterceptor - 生成的分页SQL：select * from t_base_user where 1=1 limit 0 ,10
2015-07-20 01:15:03,743 [main] DEBUG cn.mypandora.system.UserEntity.pageUsers - ==>  Preparing: select * from t_base_user where 1=1 limit 0 ,10 
2015-07-20 01:15:03,784 [main] DEBUG cn.mypandora.system.UserEntity.pageUsers - ==> Parameters: 
2015-07-20 01:15:03,829 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.pageUsers------------>
2015-07-20 01:15:03,840 [main] DEBUG cn.mypandora.dao.base.countSql - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1d9be82]
2015-07-20 01:15:03,841 [main] DEBUG cn.mypandora.dao.base.countSql - ==>  Preparing: select count(1) from (select * from t_base_user where 1=1) count_sql_alias 
2015-07-20 01:15:03,842 [main] DEBUG cn.mypandora.dao.base.countSql - ==> Parameters: 
2015-07-20 01:15:03,843 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 01:18:28,389 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:18:28,399 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.add------------>
2015-07-20 01:18:28,460 [main] DEBUG cn.mypandora.system.UserEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@da85d4]
2015-07-20 01:18:28,466 [main] DEBUG cn.mypandora.system.UserEntity.add - ==>  Preparing: INSERT INTO t_base_user ( username, password, salt, locked, real_name, email, phone, mobile, picture_url, sex, birthday, credit, last_ip, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2015-07-20 01:18:28,513 [main] DEBUG cn.mypandora.system.UserEntity.add - ==> Parameters: admin(String), ebff720d4ac42d8762881b2baf4aea73(String), 8b2608125a2fc9a117d02dd401b288ad(String), false(Boolean), kaibo(String), han@126.com(String), 12345678910(String), null, null, 2(Integer), null, 0(Integer), 127.0.0.1(String), null, null
2015-07-20 01:18:28,596 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:18:28,597 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.add------------>
2015-07-20 01:18:28,598 [main] DEBUG cn.mypandora.system.LogEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@da85d4]
2015-07-20 01:18:28,599 [main] DEBUG cn.mypandora.system.LogEntity.add - ==>  Preparing: INSERT INTO t_base_log ( name, description, ip ) VALUES ( ?, ?, ? ) 
2015-07-20 01:18:28,601 [main] DEBUG cn.mypandora.system.LogEntity.add - ==> Parameters: 稍后获取(String), 新增用户(String), 稍后获取(String)
2015-07-20 01:18:28,726 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@da85d4]
2015-07-20 01:18:28,728 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 01:18:28,729 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==> Parameters: 
2015-07-20 01:18:28,753 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 01:18:28,754 [main] ERROR cn.mypandora.log.MyLogAspect - afterThrowing
2015-07-20 01:18:28,755 [main] ERROR cn.mypandora.log.MyLogAspect - 错误信息：org.springframework.dao.DataIntegrityViolationException: cn.mypandora.system.UserEntity.add (batch index #1) failed. Cause: java.sql.BatchUpdateException: Data truncation: Data too long for column 'sex' at row 1
; SQL []; Data truncation: Data too long for column 'sex' at row 1; nested exception is java.sql.BatchUpdateException: Data truncation: Data too long for column 'sex' at row 1
2015-07-20 01:19:09,277 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:19:09,283 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.add------------>
2015-07-20 01:19:09,347 [main] DEBUG cn.mypandora.system.UserEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1e376fb]
2015-07-20 01:19:09,352 [main] DEBUG cn.mypandora.system.UserEntity.add - ==>  Preparing: INSERT INTO t_base_user ( username, password, salt, locked, real_name, email, phone, mobile, picture_url, sex, birthday, credit, last_ip, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2015-07-20 01:19:09,398 [main] DEBUG cn.mypandora.system.UserEntity.add - ==> Parameters: admin(String), 13d9d764e8f13b8be0583195eee0f0f9(String), 2a621a2431b47e9932eae3e7b0ea695e(String), false(Boolean), kaibo(String), han@126.com(String), 12345678910(String), null, null, 0(Integer), null, 0(Integer), 127.0.0.1(String), null, null
2015-07-20 01:19:09,518 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1e376fb]
2015-07-20 01:19:09,522 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 01:19:09,526 [main] DEBUG cn.mypandora.system.UserEntity.add!selectKey - ==> Parameters: 
2015-07-20 01:19:09,584 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 01:19:09,589 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:19:09,590 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.LogEntity.add------------>
2015-07-20 01:19:09,591 [main] DEBUG cn.mypandora.system.LogEntity.add - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1e376fb]
2015-07-20 01:19:09,592 [main] DEBUG cn.mypandora.system.LogEntity.add - ==>  Preparing: INSERT INTO t_base_log ( name, description, ip ) VALUES ( ?, ?, ? ) 
2015-07-20 01:19:09,594 [main] DEBUG cn.mypandora.system.LogEntity.add - ==> Parameters: 稍后获取(String), 新增用户(String), 稍后获取(String)
2015-07-20 01:19:09,699 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1e376fb]
2015-07-20 01:19:09,701 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==>  Preparing: SELECT LAST_INSERT_ID() AS ID 
2015-07-20 01:19:09,701 [main] DEBUG cn.mypandora.system.LogEntity.add!selectKey - ==> Parameters: 
2015-07-20 01:19:09,703 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
2015-07-20 01:20:37,094 [main] DEBUG cn.mypandora.log.MyLogAspect - begin around
2015-07-20 01:20:45,735 [main] DEBUG cn.mypandora.orm.dao.impl.BaseEntityDaoImpl - SQL Key <-------------cn.mypandora.system.UserEntity.findUserSexCount------------>
2015-07-20 01:20:46,032 [main] DEBUG cn.mypandora.system.UserEntity.findUserSexCount - ooo Using Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@a12a00]
2015-07-20 01:20:46,120 [main] DEBUG cn.mypandora.system.UserEntity.findUserSexCount - ==>  Preparing: SELECT t.sex, COUNT(t.sex) sexCount FROM t_base_user t GROUP BY t.sex 
2015-07-20 01:20:46,554 [main] DEBUG cn.mypandora.system.UserEntity.findUserSexCount - ==> Parameters: 
2015-07-20 01:21:54,387 [main] DEBUG cn.mypandora.log.MyLogAspect - end around
